use std::str::FromStr;
use crate::ast::node::Node;
use crate::ast::environment::{Type, Value};
use crate::ast::html::Element;
use crate::ast::expression::Expression;
use crate::ast::function::default_function;
use crate::ast::statement::Statement;

grammar;

pub Daisy: (Expression, Vec<Statement>) = {
  <body:Statement*> => (Expression::Table(vec![]), body),
  <meta:Meta> <body:Statement*> => (meta, body),
};

// Meta

Meta: Expression = {
  "meta" "{" <def:Definition*> "}" => Expression::Table(def),
}

// Types / Identifiers

Identifier: String = <s:r"[A-Za-z_][A-Za-z0-9_-]*"> => s.to_string();

Type: Type = {
  "str" => Type::Str,
  "num" => Type::Num,
  "float" => Type::Float,
  "bool" => Type::Bool,
  "element" => Type::Element,
  "func" => Type::Function,
  "table" => Type::Table,
}

Str: String = <s:r#""([^"\\]|\\.)*""#> => s[1..s.len()-1].to_string();
Num: i64 = <s:r"[0-9]+"> => i64::from_str(s).unwrap();
Float: f64 = <s:r"[0-9]+\.[0-9]+"> => f64::from_str(s).unwrap();
Bool: bool = {
  "true" => true,
  "false" => false,
};
Nil: Value = "nil" => Value::Nil;

// Expressions

Expression: Expression = {
  <l:Expression> "==" <r:Calc> => Expression::Equal(Box::new(l), Box::new(r)),
  <l:Expression> "!=" <r:Calc> => Expression::NotEqual(Box::new(l), Box::new(r)),
  <l:Expression> "||" <r:Calc> => Expression::Or(Box::new(l), Box::new(r)),
  <l:Expression> "&&" <r:Calc> => Expression::And(Box::new(l), Box::new(r)),
  <l:Expression> "<" <r:Calc> => Expression::LessThan(Box::new(l), Box::new(r)),
  <l:Expression> "<=" <r:Calc> => Expression::LessThanOrEqual(Box::new(l), Box::new(r)),
  <l:Expression> ">" <r:Calc> => Expression::GreaterThan(Box::new(l), Box::new(r)),
  <l:Expression> ">=" <r:Calc> => Expression::GreaterThanOrEqual(Box::new(l), Box::new(r)),
  ExpressionCall,
  Calc,
};

Calc: Expression = {
  <l:Calc> "+" <r:Factor> => Expression::Addition(Box::new(l), Box::new(r)),
  <l:Calc> "-" <r:Factor> => Expression::Subtraction(Box::new(l), Box::new(r)),
  Factor,
};

Factor: Expression = {
  <l:Factor> "*" <r:Term> => Expression::Multiplication(Box::new(l), Box::new(r)),
  <l:Factor> "/" <r:Term> => Expression::Division(Box::new(l), Box::new(r)),
  Term,
};


Term: Expression = {
  "(" <Expression> ")",
  <v:Value> => Expression::Value(v),
  "{" <def:Definition*> "}" => Expression::Table(def),
  "[" <args:(<Expression> ",")*> <arg:Expression?> "]" => {
    let mut args = args;
    if let Some(a) = arg {
      args.push(a);
    }
    let args: Vec<Box<Expression>> = args.into_iter().map(|e| e.into()).collect();
    Expression::Array(args)
  },
  <id:Identifier> <sub:("."<Identifier>)*> => {
    let mut path = vec![id];
    for s in sub {
      path.push(s);
    }
    Expression::Identifier(path)
  },
  <s:Script> => Expression::Script(s),
};

Script: String = "$"<s:r#"`([^`\\]|\\.)*`"#> => s[1..s.len()-1].to_string();

Value: Value = {
  <s:Str> => Value::Str(s),
  <n:Num> => Value::Num(n),
  <f:Float> => Value::Float(f),
  <b:Bool> => Value::Bool(b),
  Nil,
  ":" <e:Element> => Value::Element(e.into()),
  Function,
}

ExpressionCall: Expression = {
  <e:Expression> "(" <args:(<Expression> ",")*> <arg:Expression?> ")" => {
    let mut args = args;
    if let Some(a) = arg {
      args.push(a);
    }
    Expression::Call(e.into(), args)
  },
}

// Function Expression

FunctionParameters: Vec<Statement> = {
  <args:(<Definition> ",")*> <f:Definition> => {
    let mut params = args;
    params.push(f);
    params
  },
}

Function: Value = {
  "(" <args:FunctionParameters> ")" <return_type:Type> "{" <body:Statement*> "}" => {
    Value::Function(default_function, args, return_type, body)
  },
}

// Statements

Statement: Statement = {
  Definition,
  Assignment,
  Return,
  StatementCall,
  If,
  For,
}

Definition: Statement = {
  <t:Type> <id:Identifier> "=" <s:Expression> => Statement::Definition(t, id, s),
  <t:Type> <id:Identifier> => Statement::Definition(t, id, Expression::Nil),
}

Assignment: Statement = {
  <id:Identifier> "=" <s:Expression> => Statement::Assignment(id, s),
}

Return: Statement = "return" <s:Expression> => Statement::Return(s.into());

StatementCall: Statement = {
  <id:Identifier> "(" <args:(<Expression> ",")*> <arg:Expression?> ")" => {
    let mut args = args;
    if let Some(a) = arg {
      args.push(a);
    }
    Statement::Call(id, args)
  }
}

If: Statement = {
  "if" <condition:Expression> "{" <body:Statement*> "}" => Statement::If(condition, body),
}

For: Statement = {
  "for" <id:Identifier> "in" <iterable:Expression> "{" <body:Statement*> "}" => Statement::For(id, iterable, body),
  "for" <init:Definition> ";" <comp:Expression> ";" <step:Expression> "{" <body:Statement*> "}" => Statement::ForLoop(init.into(), comp, step, body),
}

// html related rules

Insertion: Node = {
  "@" "{" <e:Expression> "}" => Node::Insertion(e),
}

Element: Node = {
  <id:Identifier> <attrs:Attribute*> "{" <body:ElementBody*> "}" => Node::Element(Element::new(id, attrs, body)),
  <id:Identifier> <attrs:Attribute*> ">" <body:ElementBody> => Node::Element(Element::new(id, attrs, vec![body])),
  <id:Identifier> <attrs:Attribute*> ";" => Node::Element(Element::new(id, attrs, vec![])),
}

Attribute: (String, Vec<Node>) = {
  "#" <id:Identifier> => ("id".to_string(), vec![Node::Text(id)]),
  "." <id:Identifier> => ("class".to_string(), vec![Node::Text(id)]),
  <id:Identifier> "=" <s:Str> => (id, vec![Node::Text(s)]),
  <id:Identifier> "=" <i:Insertion> => (id, vec![i]),
}

ElementBody: Node = {
  Insertion,
  Element,
  <s:Str> => Node::Text(s),
}

